@model IEnumerable<Budget.Models.BudgetMod>
@{
    ViewBag.Title = "Index";
    string[] Type = { "Income", "Expense" };
}

<div class="page-body">
    <div class="row">
        <div class="col-lg-6 col-sm-6 col-xs-12">
            <div class="widget">
                <div class="widget-header bordered-left bordered-blueberry">
                    <span class="widget-caption">Budget Vs Spending</span>
                </div><!--Widget Header-->
                @foreach(var ty in Type)
                { 
                <div class="widget-body bordered-left bordered-blue">
                    <p><strong>@ty</strong></p>
                    <table class="table table-hover">
                        <thead class="bordered-darkorange">
                            <tr>
                                <th>
                                    Category
                                </th>
                                <th>
                                    Budgeted Amount
                                </th>
                                <th>
                                    Actual Amount
                                </th>
                                <th>
                                    Difference
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                var buds = Model.Where(t => t.Type == ty);
                                decimal etotal=0,atotal = 0;
                            }
                            @foreach (var bud in buds)
                            {
                                <tr>
                                    
                                    <td>
                                        @Html.DisplayFor(model => bud.Category)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(model => bud.EstAmount)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(model => bud.ActAmout)
                                    </td>
                                    <td>
                                        @(bud.EstAmount - bud.ActAmout)
                                    </td>
                                    
                                    @{ etotal += bud.EstAmount;
                                       atotal += bud.ActAmout;}
                                </tr>
                            }
                            <tr>
                                <td><strong>Total</strong></td>
                                <td><strong>@etotal</strong></td>
                                <td><strong>@atotal</strong></td>
                                <td><strong>@(etotal - atotal)</strong></td>
                            </tr>
                        </tbody>
                    </table>
                    
                </div><!--Widget Body-->
                }
            </div><!--Widget-->
        </div>
        <div class="col-lg-6 col-sm-6 col-xs-12">
            <div class="widget">
                <div class="widget-header bordered-bottom bordered-blue">
                    <span class="widget-caption"> Expenses Vs Budget for the month</span>
                </div>
                <div class="widget-body">
                    <div id="chart1"> </div>
                </div>
                </div>
            </div>
            </div>
        </div>


@section scripts {
    <script src="//cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.min.js"></script>
    <script>
        $(document).ready(function () {
            $.post('@Url.Action("GetChart", "Home")').then(function (response) {
                console.log(response.totalExpense);
                console.log(response);
                $('#exp').text('$' + response.totalExpense);
                $('#bud').text('$' + response.totalBudget);
                $('#acc').text('$' + response.totalAcc);
                new Morris.Bar({
                    // ID of the element in which to draw the chart.
                    element: 'chart1',
                    // Chart data records -- each entry in this array corresponds to a point on
                    // the chart.
                    data: response.bar,
                    // The name of the data record attribute that contains x-values.
                    xkey: 'Name',
                    // A list of names of data record attributes that contain y-values.
                    ykeys: ['Actual', 'Budgeted'],
                    // Labels for the ykeys -- will be displayed when you hover over the
                    // chart.
                    labels: ['Expenses to Date', 'Amount Budgeted'],
                    resize: true
                });
                new Morris.Donut({
                    element: 'chart2',
                    data: response.donut,
                    //label: 'Name',
                    //value: 'Value',
                    resize: true
                });
            })
        })
    </script>
}
